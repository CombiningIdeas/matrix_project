#pragma once

#include "../../include/config.h"

/**
 * @file matrix.h
 * @brief Заголовочный файл для работы с матрицами
 * 
 * Этот файл содержит объявления функций и структур, необходимых для работы с матрицами.
 * Он включает в себя определения структуры для представления матрицы и функции для её создания, освобождения,
 * копирования, а также операции над матрицами, такие как сложение, умножение, транспонирование и вычисление детерминанта.
 * 
 * Включает в себя:
 * - Структуру `Matrix` для представления матрицы.
 * - Функции для работы с матрицами: создание, копирование, сложение, умножение, транспонирование, вычисление детерминанта и загрузка из файла.
 * 
 * @see matrix.c
 */


/**
 * @brief Структура, представляющая матрицу
 * 
 * Эта структура используется для представления матрицы, включающей данные в виде двумерного массива.
 * Она содержит информацию о размерах матрицы (количестве строк и столбцов) и указатель на массив данных,
 * который хранит элементы матрицы.
 * 
 * Поля:
 * - `rows` — количество строк в матрице.
 * - `cols` — количество столбцов в матрице.
 * - `data` — указатель на двумерный массив, содержащий элементы матрицы.
 * 
 * Тип данных `MATRIX_TYPE` может быть определён как любой числовой тип, например, `float`, `double` или другой.
 */
typedef struct {
    int rows; ///< Количество строк в матрице
    int cols; ///< Количество столбцов в матрице
    MATRIX_TYPE** data; ///< Данные матрицы, элементы матрицы, представленные в виде двумерного массива
} Matrix;




/**
 * @brief Создает новую матрицу с заданными размерами
 * @param rows Количество строк
 * @param cols Количество столбцов
 * @return Указатель на созданную матрицу или NULL в случае ошибки
 */
Matrix* create_matrix(int rows, int cols);


/**
 * @brief Освобождает память, выделенную под матрицу
 * @param matrix Указатель на матрицу
 */
void free_matrix(Matrix* matrix);


/**
 * @brief Загружает матрицу из текстового файла
 * @param filename Имя файла
 * @return Указатель на загруженную матрицу или NULL в случае ошибки
 */
Matrix* load_matrix_from_file(const char* filename);


/**
 * @brief Копирует матрицу
 * @param source Указатель на исходную матрицу
 * @return Указатель на копию матрицы или NULL в случае ошибки
 */
Matrix* copy_matrix(const Matrix* source);


/**
 * @brief Складывает две матрицы
 * @param A Указатель на первую матрицу
 * @param B Указатель на вторую матрицу
 * @return Указатель на новую матрицу — результат сложения, либо NULL в случае ошибки
 */
Matrix* add_matrices(const Matrix* A, const Matrix* B);


/**
 * @brief Умножает две матрицы
 * @param A Указатель на первую матрицу
 * @param B Указатель на вторую матрицу
 * @return Указатель на новую матрицу — результат умножения, либо NULL в случае ошибки
 */
Matrix* multiply_matrices(const Matrix* A, const Matrix* B);


/**
 * @brief Транспонирует матрицу
 * @param matrix Указатель на матрицу
 * @return Указатель на новую транспонированную матрицу, либо NULL в случае ошибки
 */
Matrix* transpose_matrix(const Matrix* matrix);


/**
 * @brief Вычисляет детерминант квадратной матрицы
 * @param matrix Указатель на квадратную матрицу
 * @return Значение детерминанта матрицы
 */
MATRIX_TYPE determinant(const Matrix* matrix);